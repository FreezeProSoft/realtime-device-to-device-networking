// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using NetworkCommunication.Core;
using System.Text;

namespace NetworkCommunication.iOS
{
	public partial class ServerController : UIViewController
	{
		public ServerController (IntPtr handle) : base (handle)
		{
            
		}

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            btnStart.TouchUpInside += BtnStart_TouchUpInside;

            txtPort.ShouldReturn = SearchShouldReturn;


            socketServer = new SocketServer();

            socketServer.StateChanged += SocketServer_StateChanged;

            socketServer.ReceivedMessage += SocketServer_ReceivedMessage;

            socketServer.HostAcceptConnection += SocketServer_HostAcceptConnection;

            socketServer.HostClosedConnection += SocketServer_HostClosedConnection;
        }
            
        protected void SocketServer_StateChanged (object sender, SocketServerState state)
        {
            InvokeOnMainThread(() =>
                {
                    switch (state)
                    {
                        case SocketServerState.Starting:
                    
                            lblServerStatus.Text = "Starting";

                            lblServerStatus.TextColor = UIColor.Green;

                            btnStart.SetTitle("Stop", UIControlState.Normal);

                            break;

                        case SocketServerState.Running:

                            lblServerStatus.Text = "Running";

                            lblServerStatus.TextColor = UIColor.Green;

                            btnStart.SetTitle("Stop", UIControlState.Normal);

                            break;

                        case SocketServerState.Stopped:

                            lblServerStatus.Text = "Stopped";

                            lblServerStatus.TextColor = UIColor.Red;

                            btnStart.SetTitle("Start", UIControlState.Normal);

                            break;
                    }
                });
        }
            
        protected void BtnStart_TouchUpInside (object sender, EventArgs e)
        {
            if (socketServer.State == SocketServerState.Stopped)
            {
                int port = 6000;

                int.TryParse(txtPort.Text, out port);

                socketServer.Run(port); 
            }
            else
            {
                socketServer.Stop();
            }
        }

        protected void SocketServer_HostAcceptConnection (object sender, RemoteHost host)
        {
            AddMessage(string.Format("Host : {0} - Status : Connected ", host.Address));
        }

        protected void SocketServer_HostClosedConnection (object sender, RemoteHost host)
        {
            AddMessage(string.Format("Host : {0} - Status : Closed ", host.Address));
        }

        protected void SocketServer_ReceivedMessage (object sender, MessageReceivedEventArgs e)
        {
            AddMessage(string.Format("Host : {0} - Message : {1} ", e.Host.Address, Encoding.ASCII.GetString(e.Message)));
        }

        protected void AddMessage (string message)
        {
            InvokeOnMainThread(() =>
                {
                    txtMessages.Text = txtMessages.Text.Insert(0, string.Format("{0}\n", message));
                });
        }
            
        protected bool SearchShouldReturn (UITextField view)
        {
            view.ResignFirstResponder ();

            return true;
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            if (socketServer != null)
            {
                if (socketServer.State != SocketServerState.Stopped)
                {
                    socketServer.Stop();
                }
                
                socketServer.StateChanged -= SocketServer_StateChanged;

                socketServer.ReceivedMessage -= SocketServer_ReceivedMessage;

                socketServer.HostAcceptConnection -= SocketServer_HostAcceptConnection;

                socketServer.HostClosedConnection -= SocketServer_HostClosedConnection;
            }
        }

        private SocketServer socketServer;
	}
}
